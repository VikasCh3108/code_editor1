{"ast":null,"code":"var _jsxFileName = \"/home/user/coding_editor/frontend/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from \"react\";\nimport MonacoEditor from \"@monaco-editor/react\";\nimport axios from \"axios\";\nimport { Terminal } from \"xterm\";\nimport \"xterm/css/xterm.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [code, setCode] = useState(\"print('Hello, world!')\");\n  const [output, setOutput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [userInput, setUserInput] = useState(\"\");\n  const [showInput, setShowInput] = useState(false);\n  const termRef = useRef(null);\n\n  // Heuristic: only match input() outside of comments and strings\n  function hasActiveInput(code) {\n    // Remove comments\n    let codeNoComments = code.replace(/#.*/g, \"\");\n    // Remove strings (single, double, triple)\n    codeNoComments = codeNoComments.replace(/(['\"]{3}[\\s\\S]*?['\"]{3}|(['\"])(?:\\\\.|[^\\\\])*?\\2)/g, \"\");\n    // Now look for input() or raw_input()\n    return /\\b(input|raw_input)\\s*\\(/.test(codeNoComments);\n  }\n  const handleEditorChange = value => {\n    setCode(value);\n    if (value && hasActiveInput(value)) {\n      setShowInput(true);\n    } else {\n      setShowInput(false);\n      setUserInput(\"\");\n    }\n  };\n  const handleSubmit = async () => {\n    setOutput(\"\");\n    setError(\"\");\n    setLoading(true);\n    if (termRef.current) {\n      termRef.current.clear();\n    }\n    try {\n      const apiUrl = process.env.REACT_APP_API_URL || \"/api/execute/\";\n      const response = await axios.post(apiUrl, {\n        code,\n        language: \"python\",\n        stdin: userInput\n      });\n      setOutput(response.data.output);\n      // Do not write to terminal here; let useEffect handle it.\n    } catch (err) {\n      setError(err.response && err.response.data && err.response.data.error ? err.response.data.error : \"Error: \" + err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  React.useEffect(() => {\n    if (!termRef.current && document.getElementById(\"terminal\")) {\n      termRef.current = new Terminal();\n      termRef.current.open(document.getElementById(\"terminal\"));\n    }\n    return () => {\n      if (termRef.current) {\n        termRef.current.dispose();\n        termRef.current = null;\n      }\n    };\n  }, []);\n  React.useEffect(() => {\n    if (termRef.current && output !== undefined && output !== null) {\n      try {\n        termRef.current.clear();\n        termRef.current.write(output.replace(/\\n/g, \"\\r\\n\"));\n      } catch (e) {\n        // Ignore terminal errors\n      }\n    }\n  }, [output]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      display: \"flex\",\n      flexDirection: \"column\",\n      height: \"100vh\"\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        flex: 1\n      },\n      children: /*#__PURE__*/_jsxDEV(MonacoEditor, {\n        height: \"50vh\",\n        defaultLanguage: \"python\",\n        value: code,\n        onChange: handleEditorChange,\n        theme: \"vs-dark\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), showInput && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        margin: \"10px 0\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"userInput\",\n        style: {\n          color: \"#fff\"\n        },\n        children: [\"Program Input (for input()): \", /*#__PURE__*/_jsxDEV(\"span\", {\n          style: {\n            fontWeight: 'normal',\n            fontSize: '0.9em'\n          },\n          children: \"(one line per input)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 42\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n        id: \"userInput\",\n        value: userInput,\n        onChange: e => setUserInput(e.target.value),\n        rows: Math.max(2, userInput.split('\\n').length),\n        style: {\n          width: \"100%\",\n          padding: \"8px\",\n          marginTop: \"5px\",\n          marginBottom: \"10px\",\n          borderRadius: \"4px\",\n          border: \"1px solid #333\",\n          resize: \"vertical\"\n        },\n        placeholder: \"Enter input for your code here, one line per input() call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      style: {\n        margin: \"10px 0\",\n        padding: \"10px\"\n      },\n      disabled: loading,\n      children: loading ? \"Running...\" : \"Run Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 113,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        color: \"red\",\n        marginBottom: \"10px\"\n      },\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 117,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"terminal\",\n      style: {\n        flex: 1,\n        background: \"#111\",\n        color: \"#fff\",\n        padding: \"10px\",\n        minHeight: \"200px\"\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 88,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"0cIoHOPGtn5LgzCXjr4C6LUfDeE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useRef","MonacoEditor","axios","Terminal","jsxDEV","_jsxDEV","App","_s","code","setCode","output","setOutput","loading","setLoading","error","setError","userInput","setUserInput","showInput","setShowInput","termRef","hasActiveInput","codeNoComments","replace","test","handleEditorChange","value","handleSubmit","current","clear","apiUrl","process","env","REACT_APP_API_URL","response","post","language","stdin","data","err","message","useEffect","document","getElementById","open","dispose","undefined","write","e","style","display","flexDirection","height","children","flex","defaultLanguage","onChange","theme","fileName","_jsxFileName","lineNumber","columnNumber","margin","htmlFor","color","fontWeight","fontSize","id","target","rows","Math","max","split","length","width","padding","marginTop","marginBottom","borderRadius","border","resize","placeholder","onClick","disabled","background","minHeight","_c","$RefreshReg$"],"sources":["/home/user/coding_editor/frontend/src/App.js"],"sourcesContent":["import React, { useState, useRef } from \"react\";\nimport MonacoEditor from \"@monaco-editor/react\";\nimport axios from \"axios\";\nimport { Terminal } from \"xterm\";\nimport \"xterm/css/xterm.css\";\n\nfunction App() {\n  const [code, setCode] = useState(\"print('Hello, world!')\");\n  const [output, setOutput] = useState(\"\");\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(\"\");\n  const [userInput, setUserInput] = useState(\"\");\n  const [showInput, setShowInput] = useState(false);\n  const termRef = useRef(null);\n\n  // Heuristic: only match input() outside of comments and strings\n  function hasActiveInput(code) {\n    // Remove comments\n    let codeNoComments = code.replace(/#.*/g, \"\");\n    // Remove strings (single, double, triple)\n    codeNoComments = codeNoComments.replace(/(['\"]{3}[\\s\\S]*?['\"]{3}|(['\"])(?:\\\\.|[^\\\\])*?\\2)/g, \"\");\n    // Now look for input() or raw_input()\n    return /\\b(input|raw_input)\\s*\\(/.test(codeNoComments);\n  }\n\n  const handleEditorChange = (value) => {\n    setCode(value);\n    if (value && hasActiveInput(value)) {\n      setShowInput(true);\n    } else {\n      setShowInput(false);\n      setUserInput(\"\");\n    }\n  };\n\n  const handleSubmit = async () => {\n    setOutput(\"\");\n    setError(\"\");\n    setLoading(true);\n    if (termRef.current) {\n      termRef.current.clear();\n    }\n    try {\n      const apiUrl = process.env.REACT_APP_API_URL || \"/api/execute/\";\n      const response = await axios.post(apiUrl, {\n        code,\n        language: \"python\",\n        stdin: userInput\n      });\n      setOutput(response.data.output);\n      // Do not write to terminal here; let useEffect handle it.\n    } catch (err) {\n      setError(\n        err.response && err.response.data && err.response.data.error\n          ? err.response.data.error\n          : \"Error: \" + err.message\n      );\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  React.useEffect(() => {\n    if (!termRef.current && document.getElementById(\"terminal\")) {\n      termRef.current = new Terminal();\n      termRef.current.open(document.getElementById(\"terminal\"));\n    }\n    return () => {\n      if (termRef.current) {\n        termRef.current.dispose();\n        termRef.current = null;\n      }\n    };\n  }, []);\n\n  React.useEffect(() => {\n    if (termRef.current && output !== undefined && output !== null) {\n      try {\n        termRef.current.clear();\n        termRef.current.write(output.replace(/\\n/g, \"\\r\\n\"));\n      } catch (e) {\n        // Ignore terminal errors\n      }\n    }\n  }, [output]);\n\n  return (\n    <div style={{ display: \"flex\", flexDirection: \"column\", height: \"100vh\" }}>\n      <div style={{ flex: 1 }}>\n        <MonacoEditor\n          height=\"50vh\"\n          defaultLanguage=\"python\"\n          value={code}\n          onChange={handleEditorChange}\n          theme=\"vs-dark\"\n        />\n      </div>\n      {showInput && (\n        <div style={{ margin: \"10px 0\" }}>\n          <label htmlFor=\"userInput\" style={{ color: \"#fff\" }}>\n            Program Input (for input()): <span style={{fontWeight:'normal',fontSize:'0.9em'}}>(one line per input)</span>\n          </label>\n          <textarea\n            id=\"userInput\"\n            value={userInput}\n            onChange={e => setUserInput(e.target.value)}\n            rows={Math.max(2, userInput.split('\\n').length)}\n            style={{ width: \"100%\", padding: \"8px\", marginTop: \"5px\", marginBottom: \"10px\", borderRadius: \"4px\", border: \"1px solid #333\", resize: \"vertical\" }}\n            placeholder=\"Enter input for your code here, one line per input() call\"\n          />\n        </div>\n      )}\n      <button onClick={handleSubmit} style={{ margin: \"10px 0\", padding: \"10px\" }} disabled={loading}>\n        {loading ? \"Running...\" : \"Run Code\"}\n      </button>\n      {error && (\n        <div style={{ color: \"red\", marginBottom: \"10px\" }}>{error}</div>\n      )}\n      <div id=\"terminal\" style={{ flex: 1, background: \"#111\", color: \"#fff\", padding: \"10px\", minHeight: \"200px\" }}></div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}